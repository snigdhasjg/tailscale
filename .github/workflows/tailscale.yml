name: Tailscale
run-name: "Tailscale ${{ inputs.tf-destroy && 'destroy' || 'apply' }}"

on:
  workflow_dispatch:
    inputs:
      tf-destroy:
        type: boolean
        default: false
        description: "Terraform Destroy"


concurrency: tailscale_${{ github.ref }}

jobs:
  plan:
    environment:
      name: sandbox
      url: 'https://ap-south-1.console.aws.amazon.com/ec2/home?region=ap-south-1#Instances:instanceState=running'
    runs-on: ubuntu-latest
    name: Terraform plan
    permissions:
      id-token: write
      contents: read
    env:
      TAILSCALE_OAUTH_CLIENT_ID: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
      TAILSCALE_OAUTH_CLIENT_SECRET: ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: git-${{ github.sha }}
          aws-region: ap-south-1

      - name: Setting up terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            infra/terraform/.terraform
            infra/terraform/.terraform.lock.hcl
          key: infra-terraform-${{ github.sha }}
          restore-keys: |
            infra-terraform-

      - name: Init
        id: init
        working-directory: infra/terraform
        run: terraform init -no-color

      - name: Init, fmt, validation summary
        if: failure() == false && cancelled() == false
        run: |
          echo '{{ steps.init.outputs.stdout }}' # this fails if stdout has single quotes in it
          {
            echo -e '#### Terraform Initialization ‚öôÔ∏è ${{ steps.init.outcome }}\n'
            echo '<details>'
            echo '<summary>Initialization Output</summary>'
            echo -e '\n```'
            echo '```'
            echo -e '</details>\n'
          } >> $GITHUB_STEP_SUMMARY

      - name: Apply
        id: apply
        if: inputs.tf-destroy == false
        working-directory: infra/terraform
        run: terraform apply -auto-approve -no-color -input=false

      - name: Apply summary
        if: inputs.tf-destroy == false
        run: |
          echo '{{ steps.apply.outputs.stdout }}' # this fails if stdout has single quotes in it

          {
            echo -e '#### Terraform Apply üê¢${{ steps.apply.outcome }}\n'
            echo '<details>'
            echo '<summary>Show Apply</summary>'
            echo -e '\n```terraform'
            echo '```'
            echo '</details>'
          } >> $GITHUB_STEP_SUMMARY

      - name: Destroy
        id: destroy
        if: inputs.tf-destroy
        working-directory: infra/terraform
        run: terraform destroy -auto-approve -no-color -input=false

      - name: Destroy summary
        if: inputs.tf-destroy
        run: |
          echo '{{ steps.destroy.outputs.stdout }}' # this fails if stdout has single quotes in it
          {
            echo -e '#### Terraform Destroy ‚ôªÔ∏è${{ steps.destroy.outcome }}\n'
            echo '<details>'
            echo '<summary>Show Destroy</summary>'
            echo -e '\n```terraform'
            echo '```'
            echo '</details>'
          } >> $GITHUB_STEP_SUMMARY